// Code generated from RFC5322Lexer.g4 by ANTLR 4.10.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type RFC5322Lexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var rfc5322lexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func rfc5322lexerLexerInit() {
	staticData := &rfc5322lexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'\\u0000'", "", "'\\t'", "'\\n'", "'\\u000B'", "'\\u000C'", "'\\r'",
		"", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", "'('",
		"')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "", "':'", "';'", "'<'",
		"'='", "'>'", "'?'", "'@'", "'['", "'\\'", "']'", "'^'", "'_'", "'`'",
		"'{'", "'|'", "'}'", "'~'", "'\\u007F'",
	}
	staticData.symbolicNames = []string{
		"", "U_00", "U_01_08", "TAB", "LF", "U_0B", "U_0C", "CR", "U_0E_1F",
		"SP", "Exclamation", "DQuote", "Hash", "Dollar", "Percent", "Ampersand",
		"SQuote", "LParens", "RParens", "Asterisk", "Plus", "Comma", "Minus",
		"Period", "Slash", "Digit", "Colon", "Semicolon", "Less", "Equal", "Greater",
		"Question", "At", "LBracket", "Backslash", "RBracket", "Caret", "Underscore",
		"Backtick", "LCurly", "Pipe", "RCurly", "Tilde", "Delete", "UTF8NonAscii",
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
	}
	staticData.ruleNames = []string{
		"U_00", "U_01_08", "TAB", "LF", "U_0B", "U_0C", "CR", "U_0E_1F", "SP",
		"Exclamation", "DQuote", "Hash", "Dollar", "Percent", "Ampersand", "SQuote",
		"LParens", "RParens", "Asterisk", "Plus", "Comma", "Minus", "Period",
		"Slash", "Digit", "Colon", "Semicolon", "Less", "Equal", "Greater",
		"Question", "At", "LBracket", "Backslash", "RBracket", "Caret", "Underscore",
		"Backtick", "LCurly", "Pipe", "RCurly", "Tilde", "Delete", "UTF8NonAscii",
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 70, 281, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7,
		62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67,
		2, 68, 7, 68, 2, 69, 7, 69, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
		3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1,
		9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14,
		1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1,
		20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25,
		1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1,
		30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35,
		1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1,
		41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46,
		1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1,
		51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1, 55, 1, 56, 1, 56,
		1, 57, 1, 57, 1, 58, 1, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1, 61, 1, 61, 1,
		62, 1, 62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66, 1, 66, 1, 67,
		1, 67, 1, 68, 1, 68, 1, 69, 1, 69, 0, 0, 70, 1, 1, 3, 2, 5, 3, 7, 4, 9,
		5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14,
		29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23,
		47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32,
		65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41,
		83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50,
		101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58,
		117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66,
		133, 67, 135, 68, 137, 69, 139, 70, 1, 0, 27, 1, 0, 48, 57, 2, 0, 65, 65,
		97, 97, 2, 0, 66, 66, 98, 98, 2, 0, 67, 67, 99, 99, 2, 0, 68, 68, 100,
		100, 2, 0, 69, 69, 101, 101, 2, 0, 70, 70, 102, 102, 2, 0, 71, 71, 103,
		103, 2, 0, 72, 72, 104, 104, 2, 0, 73, 73, 105, 105, 2, 0, 74, 74, 106,
		106, 2, 0, 75, 75, 107, 107, 2, 0, 76, 76, 108, 108, 2, 0, 77, 77, 109,
		109, 2, 0, 78, 78, 110, 110, 2, 0, 79, 79, 111, 111, 2, 0, 80, 80, 112,
		112, 2, 0, 81, 81, 113, 113, 2, 0, 82, 82, 114, 114, 2, 0, 83, 83, 115,
		115, 2, 0, 84, 84, 116, 116, 2, 0, 85, 85, 117, 117, 2, 0, 86, 86, 118,
		118, 2, 0, 87, 87, 119, 119, 2, 0, 88, 88, 120, 120, 2, 0, 89, 89, 121,
		121, 2, 0, 90, 90, 122, 122, 280, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0,
		5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0,
		13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0,
		0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0,
		0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0,
		0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1,
		0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51,
		1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0,
		59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0,
		0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0,
		0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0,
		0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1,
		0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97,
		1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0,
		0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1,
		0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0,
		119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0,
		0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133,
		1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0, 0, 0,
		1, 141, 1, 0, 0, 0, 3, 143, 1, 0, 0, 0, 5, 145, 1, 0, 0, 0, 7, 147, 1,
		0, 0, 0, 9, 149, 1, 0, 0, 0, 11, 151, 1, 0, 0, 0, 13, 153, 1, 0, 0, 0,
		15, 155, 1, 0, 0, 0, 17, 157, 1, 0, 0, 0, 19, 159, 1, 0, 0, 0, 21, 161,
		1, 0, 0, 0, 23, 163, 1, 0, 0, 0, 25, 165, 1, 0, 0, 0, 27, 167, 1, 0, 0,
		0, 29, 169, 1, 0, 0, 0, 31, 171, 1, 0, 0, 0, 33, 173, 1, 0, 0, 0, 35, 175,
		1, 0, 0, 0, 37, 177, 1, 0, 0, 0, 39, 179, 1, 0, 0, 0, 41, 181, 1, 0, 0,
		0, 43, 183, 1, 0, 0, 0, 45, 185, 1, 0, 0, 0, 47, 187, 1, 0, 0, 0, 49, 189,
		1, 0, 0, 0, 51, 191, 1, 0, 0, 0, 53, 193, 1, 0, 0, 0, 55, 195, 1, 0, 0,
		0, 57, 197, 1, 0, 0, 0, 59, 199, 1, 0, 0, 0, 61, 201, 1, 0, 0, 0, 63, 203,
		1, 0, 0, 0, 65, 205, 1, 0, 0, 0, 67, 207, 1, 0, 0, 0, 69, 209, 1, 0, 0,
		0, 71, 211, 1, 0, 0, 0, 73, 213, 1, 0, 0, 0, 75, 215, 1, 0, 0, 0, 77, 217,
		1, 0, 0, 0, 79, 219, 1, 0, 0, 0, 81, 221, 1, 0, 0, 0, 83, 223, 1, 0, 0,
		0, 85, 225, 1, 0, 0, 0, 87, 227, 1, 0, 0, 0, 89, 229, 1, 0, 0, 0, 91, 231,
		1, 0, 0, 0, 93, 233, 1, 0, 0, 0, 95, 235, 1, 0, 0, 0, 97, 237, 1, 0, 0,
		0, 99, 239, 1, 0, 0, 0, 101, 241, 1, 0, 0, 0, 103, 243, 1, 0, 0, 0, 105,
		245, 1, 0, 0, 0, 107, 247, 1, 0, 0, 0, 109, 249, 1, 0, 0, 0, 111, 251,
		1, 0, 0, 0, 113, 253, 1, 0, 0, 0, 115, 255, 1, 0, 0, 0, 117, 257, 1, 0,
		0, 0, 119, 259, 1, 0, 0, 0, 121, 261, 1, 0, 0, 0, 123, 263, 1, 0, 0, 0,
		125, 265, 1, 0, 0, 0, 127, 267, 1, 0, 0, 0, 129, 269, 1, 0, 0, 0, 131,
		271, 1, 0, 0, 0, 133, 273, 1, 0, 0, 0, 135, 275, 1, 0, 0, 0, 137, 277,
		1, 0, 0, 0, 139, 279, 1, 0, 0, 0, 141, 142, 5, 0, 0, 0, 142, 2, 1, 0, 0,
		0, 143, 144, 2, 1, 8, 0, 144, 4, 1, 0, 0, 0, 145, 146, 5, 9, 0, 0, 146,
		6, 1, 0, 0, 0, 147, 148, 5, 10, 0, 0, 148, 8, 1, 0, 0, 0, 149, 150, 5,
		11, 0, 0, 150, 10, 1, 0, 0, 0, 151, 152, 5, 12, 0, 0, 152, 12, 1, 0, 0,
		0, 153, 154, 5, 13, 0, 0, 154, 14, 1, 0, 0, 0, 155, 156, 2, 14, 31, 0,
		156, 16, 1, 0, 0, 0, 157, 158, 5, 32, 0, 0, 158, 18, 1, 0, 0, 0, 159, 160,
		5, 33, 0, 0, 160, 20, 1, 0, 0, 0, 161, 162, 5, 34, 0, 0, 162, 22, 1, 0,
		0, 0, 163, 164, 5, 35, 0, 0, 164, 24, 1, 0, 0, 0, 165, 166, 5, 36, 0, 0,
		166, 26, 1, 0, 0, 0, 167, 168, 5, 37, 0, 0, 168, 28, 1, 0, 0, 0, 169, 170,
		5, 38, 0, 0, 170, 30, 1, 0, 0, 0, 171, 172, 5, 39, 0, 0, 172, 32, 1, 0,
		0, 0, 173, 174, 5, 40, 0, 0, 174, 34, 1, 0, 0, 0, 175, 176, 5, 41, 0, 0,
		176, 36, 1, 0, 0, 0, 177, 178, 5, 42, 0, 0, 178, 38, 1, 0, 0, 0, 179, 180,
		5, 43, 0, 0, 180, 40, 1, 0, 0, 0, 181, 182, 5, 44, 0, 0, 182, 42, 1, 0,
		0, 0, 183, 184, 5, 45, 0, 0, 184, 44, 1, 0, 0, 0, 185, 186, 5, 46, 0, 0,
		186, 46, 1, 0, 0, 0, 187, 188, 5, 47, 0, 0, 188, 48, 1, 0, 0, 0, 189, 190,
		7, 0, 0, 0, 190, 50, 1, 0, 0, 0, 191, 192, 5, 58, 0, 0, 192, 52, 1, 0,
		0, 0, 193, 194, 5, 59, 0, 0, 194, 54, 1, 0, 0, 0, 195, 196, 5, 60, 0, 0,
		196, 56, 1, 0, 0, 0, 197, 198, 5, 61, 0, 0, 198, 58, 1, 0, 0, 0, 199, 200,
		5, 62, 0, 0, 200, 60, 1, 0, 0, 0, 201, 202, 5, 63, 0, 0, 202, 62, 1, 0,
		0, 0, 203, 204, 5, 64, 0, 0, 204, 64, 1, 0, 0, 0, 205, 206, 5, 91, 0, 0,
		206, 66, 1, 0, 0, 0, 207, 208, 5, 92, 0, 0, 208, 68, 1, 0, 0, 0, 209, 210,
		5, 93, 0, 0, 210, 70, 1, 0, 0, 0, 211, 212, 5, 94, 0, 0, 212, 72, 1, 0,
		0, 0, 213, 214, 5, 95, 0, 0, 214, 74, 1, 0, 0, 0, 215, 216, 5, 96, 0, 0,
		216, 76, 1, 0, 0, 0, 217, 218, 5, 123, 0, 0, 218, 78, 1, 0, 0, 0, 219,
		220, 5, 124, 0, 0, 220, 80, 1, 0, 0, 0, 221, 222, 5, 125, 0, 0, 222, 82,
		1, 0, 0, 0, 223, 224, 5, 126, 0, 0, 224, 84, 1, 0, 0, 0, 225, 226, 5, 127,
		0, 0, 226, 86, 1, 0, 0, 0, 227, 228, 2, 128, 65535, 0, 228, 88, 1, 0, 0,
		0, 229, 230, 7, 1, 0, 0, 230, 90, 1, 0, 0, 0, 231, 232, 7, 2, 0, 0, 232,
		92, 1, 0, 0, 0, 233, 234, 7, 3, 0, 0, 234, 94, 1, 0, 0, 0, 235, 236, 7,
		4, 0, 0, 236, 96, 1, 0, 0, 0, 237, 238, 7, 5, 0, 0, 238, 98, 1, 0, 0, 0,
		239, 240, 7, 6, 0, 0, 240, 100, 1, 0, 0, 0, 241, 242, 7, 7, 0, 0, 242,
		102, 1, 0, 0, 0, 243, 244, 7, 8, 0, 0, 244, 104, 1, 0, 0, 0, 245, 246,
		7, 9, 0, 0, 246, 106, 1, 0, 0, 0, 247, 248, 7, 10, 0, 0, 248, 108, 1, 0,
		0, 0, 249, 250, 7, 11, 0, 0, 250, 110, 1, 0, 0, 0, 251, 252, 7, 12, 0,
		0, 252, 112, 1, 0, 0, 0, 253, 254, 7, 13, 0, 0, 254, 114, 1, 0, 0, 0, 255,
		256, 7, 14, 0, 0, 256, 116, 1, 0, 0, 0, 257, 258, 7, 15, 0, 0, 258, 118,
		1, 0, 0, 0, 259, 260, 7, 16, 0, 0, 260, 120, 1, 0, 0, 0, 261, 262, 7, 17,
		0, 0, 262, 122, 1, 0, 0, 0, 263, 264, 7, 18, 0, 0, 264, 124, 1, 0, 0, 0,
		265, 266, 7, 19, 0, 0, 266, 126, 1, 0, 0, 0, 267, 268, 7, 20, 0, 0, 268,
		128, 1, 0, 0, 0, 269, 270, 7, 21, 0, 0, 270, 130, 1, 0, 0, 0, 271, 272,
		7, 22, 0, 0, 272, 132, 1, 0, 0, 0, 273, 274, 7, 23, 0, 0, 274, 134, 1,
		0, 0, 0, 275, 276, 7, 24, 0, 0, 276, 136, 1, 0, 0, 0, 277, 278, 7, 25,
		0, 0, 278, 138, 1, 0, 0, 0, 279, 280, 7, 26, 0, 0, 280, 140, 1, 0, 0, 0,
		1, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// RFC5322LexerInit initializes any static state used to implement RFC5322Lexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewRFC5322Lexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func RFC5322LexerInit() {
	staticData := &rfc5322lexerLexerStaticData
	staticData.once.Do(rfc5322lexerLexerInit)
}

// NewRFC5322Lexer produces a new lexer instance for the optional input antlr.CharStream.
func NewRFC5322Lexer(input antlr.CharStream) *RFC5322Lexer {
	RFC5322LexerInit()
	l := new(RFC5322Lexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &rfc5322lexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "RFC5322Lexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// RFC5322Lexer tokens.
const (
	RFC5322LexerU_00         = 1
	RFC5322LexerU_01_08      = 2
	RFC5322LexerTAB          = 3
	RFC5322LexerLF           = 4
	RFC5322LexerU_0B         = 5
	RFC5322LexerU_0C         = 6
	RFC5322LexerCR           = 7
	RFC5322LexerU_0E_1F      = 8
	RFC5322LexerSP           = 9
	RFC5322LexerExclamation  = 10
	RFC5322LexerDQuote       = 11
	RFC5322LexerHash         = 12
	RFC5322LexerDollar       = 13
	RFC5322LexerPercent      = 14
	RFC5322LexerAmpersand    = 15
	RFC5322LexerSQuote       = 16
	RFC5322LexerLParens      = 17
	RFC5322LexerRParens      = 18
	RFC5322LexerAsterisk     = 19
	RFC5322LexerPlus         = 20
	RFC5322LexerComma        = 21
	RFC5322LexerMinus        = 22
	RFC5322LexerPeriod       = 23
	RFC5322LexerSlash        = 24
	RFC5322LexerDigit        = 25
	RFC5322LexerColon        = 26
	RFC5322LexerSemicolon    = 27
	RFC5322LexerLess         = 28
	RFC5322LexerEqual        = 29
	RFC5322LexerGreater      = 30
	RFC5322LexerQuestion     = 31
	RFC5322LexerAt           = 32
	RFC5322LexerLBracket     = 33
	RFC5322LexerBackslash    = 34
	RFC5322LexerRBracket     = 35
	RFC5322LexerCaret        = 36
	RFC5322LexerUnderscore   = 37
	RFC5322LexerBacktick     = 38
	RFC5322LexerLCurly       = 39
	RFC5322LexerPipe         = 40
	RFC5322LexerRCurly       = 41
	RFC5322LexerTilde        = 42
	RFC5322LexerDelete       = 43
	RFC5322LexerUTF8NonAscii = 44
	RFC5322LexerA            = 45
	RFC5322LexerB            = 46
	RFC5322LexerC            = 47
	RFC5322LexerD            = 48
	RFC5322LexerE            = 49
	RFC5322LexerF            = 50
	RFC5322LexerG            = 51
	RFC5322LexerH            = 52
	RFC5322LexerI            = 53
	RFC5322LexerJ            = 54
	RFC5322LexerK            = 55
	RFC5322LexerL            = 56
	RFC5322LexerM            = 57
	RFC5322LexerN            = 58
	RFC5322LexerO            = 59
	RFC5322LexerP            = 60
	RFC5322LexerQ            = 61
	RFC5322LexerR            = 62
	RFC5322LexerS            = 63
	RFC5322LexerT            = 64
	RFC5322LexerU            = 65
	RFC5322LexerV            = 66
	RFC5322LexerW            = 67
	RFC5322LexerX            = 68
	RFC5322LexerY            = 69
	RFC5322LexerZ            = 70
)
